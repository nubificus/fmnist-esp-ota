cmake_minimum_required(VERSION 3.5)
set(CMAKE_CXX_STANDARD 17)
include($ENV{IDF_PATH}/tools/cmake/project.cmake)

# Define valid device types
set(PSRAM_DEVICES "esp32" "esp32s2" "esp32s3")

# When PSRAM is enabled, check the device type supports it
if(DEFINED ENV{enable_psram} AND NOT "$ENV{DEVICE_TYPE}" IN_LIST PSRAM_DEVICES)
	message(FATAL_ERROR "PSRAM is enabled, but DEVICE_TYPE: $ENV{DEVICE_TYPE} is not one of the supported PSRAM devices: ${PSRAM_DEVICES}")
endif()

# General variables
if(DEFINED ENV{DEVICE_TYPE})
	add_compile_definitions(DEVICE_TYPE=\"$ENV{DEVICE_TYPE}\")
else()
	add_compile_definitions(DEVICE_TYPE="esp32s3")
	message(WARNING "DEVICE_TYPE is not set, using default value")
endif()

if(DEFINED ENV{WIFI_SSID})
	add_compile_definitions(WIFI_SSID=\"$ENV{WIFI_SSID}\")
else()
	add_compile_definitions(WIFI_SSID="guest")
	message(WARNING "WIFI_SSID is not set, using default value")
endif()

if(DEFINED ENV{WIFI_PASS})
	add_compile_definitions(WIFI_PASS=\"$ENV{WIFI_PASS}\")
else()
	add_compile_definitions(WIFI_PASS="guest")
	message(WARNING "WIFI_PASS is not set, using default value")
endif()

# Conditionally define the STOCK and OTA_SECURE macros
if(DEFINED ENV{STOCK})
	add_compile_definitions(STOCK)
	message("OTA update disabled")
else()
	message(WARNING "OTA update enabled")
endif()

if(DEFINED ENV{OTA_SECURE})
	add_compile_definitions(OTA_SECURE)
	message("Secure OTA update enabled")
else()
	message(WARNING "Secure OTA update disabled")
endif()

# App-specific variables
if(DEFINED ENV{version})
	add_compile_definitions(FIRMWARE_VERSION=\"$ENV{version}\")
else()
	add_compile_definitions(FIRMWARE_VERSION="1.1.1")
	message(WARNING "FIRMWARE_VERSION is not set, using default value")
endif()

if(DEFINED ENV{type})
	add_compile_definitions(APPLICATION_TYPE=\"$ENV{type}\")
else()
	add_compile_definitions(APPLICATION_TYPE="simple_cnn")
	message(WARNING "APPLICATION_TYPE is not set, using default value")
endif()

if (DEFINED ENV{tensor_allocation_space})
	math(EXPR TENSOR_ALLOCATION_SPACE_VALUE "$ENV{tensor_allocation_space}")
	add_compile_definitions(TENSOR_ALLOCATION_SPACE=${TENSOR_ALLOCATION_SPACE_VALUE})
	message("TENSOR_ALLOCATION_SPACE is set to ${TENSOR_ALLOCATION_SPACE_VALUE}")
else()
	math(EXPR TENSOR_ALLOCATION_SPACE_VALUE "200 * 1024")
	add_compile_definitions(TENSOR_ALLOCATION_SPACE=${TENSOR_ALLOCATION_SPACE_VALUE})
	message(WARNING "TENSOR_ALLOCATION_SPACE is not set, using default value 200KB")
endif()

if(DEFINED ENV{load_model_from_partition})
	add_compile_definitions(LOAD_MODEL_FROM_PARTITION)
	message("Loading model from flash partition")

	if (DEFINED ENV{tflite_model_size})
		math(EXPR TFLITE_MODEL_SIZE_VALUE "$ENV{tflite_model_size}")
		add_compile_definitions(TFLITE_MODEL_SIZE=${TFLITE_MODEL_SIZE_VALUE})
		message("TFLITE_MODEL_SIZE is set to ${TFLITE_MODEL_SIZE_VALUE}")
	else()
		message(FATAL_ERROR "TFLITE_MODEL_SIZE is not set")
	endif()
else()
	message(WARNING "Loading model from the micro_model.cpp file")
endif()

if(DEFINED ENV{quad_psram})
	add_compile_definitions(ENABLE_PSRAM)
	message("Using quad PSRAM configuration")
elseif(DEFINED ENV{oct_psram})
	add_compile_definitions(ENABLE_PSRAM)
	message("Using octal PSRAM configuration")
else()
	message("Using internal RAM configuration")
endif()

project(esp_tflite_app)